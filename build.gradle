plugins {
    id "com.github.onslip.gradle-one-jar" version "1.0.5"
    id 'com.github.johnrengelman.shadow' version '8.1.0' // For Runnable JAR creation with shadowJar
    id 'java'
}

apply plugin: 'java-library'

repositories {
    mavenCentral()
//    maven { url "https://jitpack.io" }
//    maven { url "https://code.lds.org/nexus/content/groups/main-repo" } //for ojdbc6
}

dependencies {
//This project itself (just an example)
//    implementation("com.github.LV-eMeS:eMeS_Libraries:v2.X.Y")
    //Other dependencies - libraries
    api("commons-io:commons-io:2.6")
    api("commons-lang:commons-lang:2.6")
    api("commons-codec:commons-codec:1.11")
    api("org.apache.commons:commons-compress:1.16")
    api("log4j:log4j:1.2.17")
    api("mysql:mysql-connector-java:8.0.19")
    api("net.java.dev.jna:jna-platform:4.4.0")
    api("org.json:json:20180130")
    api(group: 'jmimemagic', name: 'jmimemagic', version: '0.1.2') {
        exclude group: 'xerces', module: 'xerces'
    }
    api("org.apache.commons:commons-lang3:3.5") //for EqualsBuilder
    api('net.sf.opencsv:opencsv:2.3')
    api('org.yaml:snakeyaml:1.21')
    api('com.squareup.okhttp3:okhttp:3.11.0')
    api('org.threeten:threetenbp:1.3.8') //to backport ZonedDateTime classes in order to use those on Android
//    api("com.oracle:ojdbc6:11.2.0.3")
//    api(group: 'com.jayway.restassured', name: 'rest-assured', version: '2.9.0')
    api("com.google.guava:guava:18.0")
    api('org.bouncycastle:bcprov-jdk16:1.45')

    //For tests:
    implementation("junit:junit:4.12") // TODO when MS_EqualityCheckBuilder will be removed move to testImplementation
    implementation('org.mockito:mockito-all:1.10.19')
    testImplementation "org.assertj:assertj-core:3.10.0"
}

//All the dealing with encoding
compileJava.options.encoding = 'UTF-8'
tasks.withType(JavaCompile) {options.encoding = 'UTF-8'}
tasks.withType(Javadoc) {options.encoding = 'UTF-8'}
test {systemProperty "file.encoding", "utf-8"}

task sourcesJar(type: Jar, dependsOn: classes) {
    from sourceSets.main.allSource
}

task testsJar(type: Jar, dependsOn: classes) {
    from sourceSets.test.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    from javadoc.destinationDir
}

artifacts {
    archives sourcesJar
    archives testsJar
//    archives javadocJar
}

//----------------------------------------------------------------------------------------------------------------------
//Things to create runnable JARs
shadowJar {
    archiveBaseName.set('ScriptRunner')
    archiveClassifier.set('')
    archiveVersion.set('4.0.0')
}
jar {
    manifest {
        attributes 'Main-Class': 'lv.emes.libraries.examples.MSScriptRunnerExecutable'
    }
}
